Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Restaurant Management Service API Application\r\n\r\n\r\n## Built With\r\n* `Java 17`\r\n* `Maven 4.0.0`\r\n* `MySql Ver 8.0.32`\r\n* `Spring Boot 3.0.5`\r\n* `IntelliJ IDEA 2023.1 (Community Edition)`\r\n\r\n## Data Flow\r\n\r\n### 1. Model:\r\n* It consists of **Admin** ,**User**, **Viewer** ,**Food** ,**Order** and **AuthToken** entity classes along with their data members and member functions\r\n* Used **_@Table_** and **_@Entity_** annotations inside the entity class.\r\n* Used Lombok to reduce boilerplate code for pojo class.By using Lombok annotations like _**@Data,**_ **@_NoArgsConstructor_**, **_@AllArgsConstructor_** getters and setters for those object generate automatically.\r\n* Used **_@OneToOne_**, **_@OneToMany_**, **_@ManyToOne_**, and  **_@ManyToMany_**, annotation to perform one to one mapping between Employee and User.\r\n\r\n### 2. Controller:\r\n* It consists of  **AdminController** ,**UserController**, **ViewerController**, **FoodController** and **OrderController** classes in which used the annotations like **@RestController** to annotate the class as Controller.\r\n* Used annotation **_@GetMapping_** , **_@PostMapping_** , **_@PutMapping_** , **_@DeleteMapping_** to map the HTTP web requests to the specific handler methods.\r\n\r\n<br>\r\n\r\n### API Reference:\r\n<br>\r\n\r\n>Admin's API References\r\n\r\n<br>\r\n\r\n* Add Admin:\r\n```*.sh-session\r\n  http://localhost:8080/admin\r\n```\r\n\r\n* Add Food via Admin:\r\n```*.sh-session\r\n  http://localhost:8080/admin/food/email/{adminEmail}\r\n```\r\n\r\n* Get Menu via Admin:\r\n```*.sh-session\r\n  http://localhost:8080/admin/menu\r\n```\r\n\r\n* Delete Menu Item via Admin:\r\n```*.sh-session\r\n  http://localhost:8080/admin/food/email/{adminEmail}/foodId/{foodId}\r\n```\r\n\r\n<br>\r\n\r\n>User's API References:\r\n\r\n<br>\r\n\r\n*  User SigUp:\r\n```*.sh-session\r\n  http://localhost:8080/user/signup\r\n```\r\n\r\n* User SignIn:\r\n```*.sh-session\r\n  http://localhost:8080/user/signin\r\n```\r\n\r\n* User SignOut:\r\n```*.sh-session\r\n  http://localhost:8080/user/sign-out\r\n```\r\n\r\n* Get Menu via User:\r\n```*.sh-session\r\n  http://localhost:8080/user/menu\r\n```\r\n\r\n* Create Order via User:\r\n```*.sh-session\r\n  http://localhost:8080/user/order/email/{email}/token/{token}\r\n```\r\n\r\n* Check Orders via User:\r\n```*.sh-session\r\n  http://localhost:8080/user/order/email/{email}/token/{token}\r\n```\r\n\r\n* Cancel Order By Order Id via User:\r\n```*.sh-session\r\n  http://localhost:8080/user/order/email/{email}/token/{token}/orderId/{orderId}\r\n```\r\n\r\n>Food's API References:\r\n\r\n<br>\r\n\r\n* Get Food:\r\n```*.sh-session\r\n  http://localhost:8080/Food/\r\n```\r\n\r\n>Viewer's API References:\r\n\r\n<br>\r\n\r\n* Check Menu via Viewer:\r\n```*.sh-session\r\n  http://localhost:8080/viewer/menu\r\n```\r\n\r\n\r\n### 3. Service:\r\n* It consists of **AdminService** ,**UserService**, **FoodService**, **ViewerService**, **OrderService** and  **AuthTokenService** classes in which provide some business functionalities of every handler methods.\r\n* Used _**@Service**_ annotation to indicate that a class belongs to the service layer.\r\n* Used **_@Transactional_** annotation to separate transaction management code from the code for business logic on the update and delete methods.\r\n\r\n### 4. Repository:\r\n* It consists of **AdminDao** ,**UserDao**, **ViewerDao**, **FoodDao**, **OrderDao** and **AuthTokenDao** interface classes that extends CrudRepository which is interface for generic inbuilt CRUD operations on a repository for a specific type. Usually represent the database access layer in an application.\r\n* Used **Iterable** to manage the data of entity classes by performing CRUD operations.\r\n* Used _**@Repository**_ annotation is used to indicate that the class provides the mechanism for storage, retrieval, search, update and delete operation on objects.\r\n* Used _**@Modifying**_ annotation wrote named parameters query using @Query annotation to insert, update, or delete an entity.\r\n\r\n## Data Structure Used\r\nUsed `Iterable<T>` to store objects for entity classes.\r\n\r\n## Project Summary\r\n* In this project I performed CRUD operation like add,get,delete and update.<br/>\r\n* The aim of this project to perform **_one to one_**, **_one-to-many_**, and **_many-to-one_** relationships mapping between entity classes.\r\n* Used interface classJpaRepository  for generic CRUD inbuilt operations like save,saveAll,updateById, etc.\r\n* Used our own custom finder methods and wrote operations using custom queries.
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 55e09d08b31c63fba1f578d73fb4595c4a49b34b)
+++ b/README.md	(date 1684484081606)
@@ -23,6 +23,7 @@
 <br>
 
 ### API Reference:
+
 <br>
 
 >Admin's API References
@@ -89,6 +90,7 @@
 ```*.sh-session
   http://localhost:8080/user/order/email/{email}/token/{token}/orderId/{orderId}
 ```
+<br>
 
 >Food's API References:
 
@@ -99,6 +101,8 @@
   http://localhost:8080/Food/
 ```
 
+<br>
+
 >Viewer's API References:
 
 <br>
@@ -127,4 +131,5 @@
 * In this project I performed CRUD operation like add,get,delete and update.<br/>
 * The aim of this project to perform **_one to one_**, **_one-to-many_**, and **_many-to-one_** relationships mapping between entity classes.
 * Used interface classJpaRepository  for generic CRUD inbuilt operations like save,saveAll,updateById, etc.
-* Used our own custom finder methods and wrote operations using custom queries.
\ No newline at end of file
+* Used our own custom finder methods and wrote operations using custom queries.
+* Implemened authenticaion for admin, user and their handler methods so every time we use their mappings it is required to authenticate.
